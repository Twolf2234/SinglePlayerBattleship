import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Random;

public class TeamProject {
	public static Character[] playerBoard = new Character[100];
	public static Character[] enemyBoard = new Character[100];
	public static Map<Integer, Map<Integer, Integer>> boatPositions = new HashMap<>();
	public static Set<Integer> hit = new HashSet<Integer>();
	public static Set<Integer> miss = new HashSet<Integer>();

	// Each array stores each spot
	public static Map<Integer, Integer> Five = new HashMap<>();
	public static Map<Integer, Integer> Four = new HashMap<>();
	public static Map<Integer, Integer> Three = new HashMap<>();
	public static Map<Integer, Integer> Three2 = new HashMap<>();
	public static Map<Integer, Integer> Two = new HashMap<>();
	private static boolean up = false;
	private static boolean down = false;
	private static boolean left = false;
	private static boolean right = false;

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int difficulty = difficulty(s);
		int misses = 0;
		System.out.println("Generating enemy ship positions...");
		emptyBoard(playerBoard);
		emptyBoard(enemyBoard);
		computerShips();
		
		

		while (!gameover(misses, difficulty)) {
			printBoard(playerBoard);
			System.out.println("");

			String column = null;
			int row = 0;
			while (true) {
				System.out.print("Please select a column (A-J): ");
				// checks if user typed a letter A through J
				Pattern p1 = Pattern.compile("[A-J]");
				Pattern p2 = Pattern.compile("[a-j]");
				if (s.hasNext(p1)) {
					column = s.next(p1);
					s.nextLine();
					break;
				}
				if (s.hasNext(p2)) {
					column = s.next(p2);
					s.nextLine();
					break;
				} else {
					System.out.println("That was not a valid input! Please try again.");
					s.nextLine();
				}
			}
			while (true) {
				System.out.print("Please select a row (1-10): ");
				// checks if user typed a number 1 through 10
				if (s.hasNextInt()) {
					int input = s.nextInt();
					if (input > 0 && input <= 10) {
						row = input;
						s.nextLine();
						break;
					} else {
						System.out.println("That was not a valid input! Please try again.");
						s.nextLine();
						continue;
					}
				} else {
					System.out.println("That was not a valid input! Please try again.");
					s.nextLine();
				}
			}
			System.out.println("Player guess: " + column + row);
			int pos = charToPos(column, row);
			System.out.println("Player guess: " + pos);
		}

	}



	private static int charToPos(String column, int row) {
		String[] keyUpper = new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};
		String[] keyLower = new String[] {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
		int intColumn = 0; // 1 - 10
		
		for (int i = 0; i < keyUpper.length; i++) {
			if (column.equals(keyUpper[i])) {
				intColumn = i + 1;
			}
			else if (column.equals(keyLower[i])) {
				intColumn = i + 1;
			}
		}
		
		return (row - 1) * 10 + intColumn;
	}



	public static int difficulty(Scanner s) {
		// sets the difficulty for the game
		// difficulty is based on the number of misses
		String difficultyPrompt = "Please select a difficulty (1-5): ";
		return promptNumberReadLine(s, difficultyPrompt, 5);
	}

	public static void helpMessage(Scanner s) {
		System.out.println("Help message.");
	}

	public static int promptNumberReadLine(Scanner s, String prompt, int max) {
		while (true) {
			System.out.print(prompt);
			if (s.hasNextInt()) {
				int input = s.nextInt();
				if (input > 0 && input <= max) {
					s.nextLine();
					return input;
				} else {
					System.out.println("That was not a valid number! Please try again.");
					s.nextLine();
					continue;
				}
			} else {
				System.out.println("That was not a valid number! Please try again.");
				s.nextLine();
			}
		}
	}

	public static void emptyBoard(Character[] board) {

		for (int i = 0; i < board.length; i++) {
			board[i] = '-';
		}
	}

	public static void updateBoard(Character[] board) {
		// updates the board array after values have been added to the hit and miss sets
		int i = 1;
		for (char c : board) {
			if (hit.contains(i))
				board[i - 1] = 'X';
			if (miss.contains(i))
				board[i - 1] = 'O';
			i++;
		}
	}

	public static void computerShips() {
		// randomly places the ships at the start of the game
		// and saves those locations to the "boatPositions" set
		/*
		 *  1  2  3  4  5  6  7  8  9 10
		 * 11 12 13 14 15 16 17 18 19 20
		 * 21 22 23 24 25 26 27 28 29 30
		 * 31 32 33 34 35 36 37 38 39 40
		 * 41 42 43 44 45 46 47 48 49 50
		 * 51 52 53 54 55 56 57 58 59 60
		 * 61 62 63 64 65 66 67 68 69 70
		 * 71 72 73 74 75 76 77 78 79 80
		 * 81 82 83 84 85 86 87 88 89 90
		 * 91 92 93 94 95 96 97 98 99 100
		 * 
		 * (Reference for me to thing how to place ships)
		 */


		int size = 5;
		int pos = randomViableSquare(size);
		int direction = randomViableDirection();
		placeBoat(pos, direction, size);
		
		size = 4;
		pos = randomViableSquare(size);
		direction = randomViableDirection();
		placeBoat(pos, direction, size);

		size = 3;
		pos = randomViableSquare(size);
		direction = randomViableDirection();
		placeBoat(pos, direction, size);
		
		size = 3; //three2
		pos = randomViableSquare(size);
		direction = randomViableDirection();
		placeBoat(pos, direction, size-1); //minus 1 b/c there are two 3 long ships
		
		size = 2;
		pos = randomViableSquare(size);
		direction = randomViableDirection();
		placeBoat(pos, direction, size-1);
	}
	private static void placeBoat(int pos, int direction, int size) {
		int first = pos;
		int second = 0;
		int third = 0;
		int fourth = 0;
		int fifth = 0;
		
		if (direction == 3) { //right
			second = first + 1;
			third = first + 2;
			fourth = first + 3;
			fifth = first + 4;
		}
		if (direction == 4) { //left
			second = first - 1;
			third = first - 2;
			fourth = first - 3;
			fifth = first - 4;
		}
		if (direction == 1) { //up
			second = first - 10;
			third = first - 20;
			fourth = first - 30;
			fifth = first - 40;
		}
		if (direction == 2) { //down
			second = first + 10;
			third = first + 20;
			fourth = first + 30;
			fifth = first + 40;
		}
		if (size == 5) {
			Five.put(1, first);
			Five.put(2, second);
			Five.put(3, third);
			Five.put(4, fourth);
			Five.put(5, fifth);
			boatPositions.put(5, Five);
		}
		if (size == 4) {
			Four.put(1, first);
			Four.put(2, second);
			Four.put(3, third);
			Four.put(4, fourth);
			boatPositions.put(4, Four);
		}
		if (size == 3) {
			Three.put(1, first);
			Three.put(2, second);
			Three.put(3, third);
			boatPositions.put(3, Three);

		}
		if (size == 2) {
			Three2.put(1, first);
			Three2.put(2, second);
			Three2.put(3, third);
			boatPositions.put(2, Three2);

		}
		if (size == 1) {
			Two.put(1, first);
			Two.put(2, second);
			boatPositions.put(1, Two);

		}
		enemyBoard[first - 1] = 'X';
		enemyBoard[second - 1] = 'X';
		if (size > 1) enemyBoard[third - 1] = 'X';
		if (size > 3) enemyBoard[fourth - 1] = 'X';
		if (size > 4) enemyBoard[fifth - 1] = 'X';
	}
	private static int randomViableDirection() {
		int intUp = 0;
		int intDown = 0;
		int intRight = 0;
		int intLeft = 0;
		if (up)
			intUp = 1;
		if (down)
			intDown = 1;
		if (right)
			intRight = 1;
		if (left)
			intLeft = 1;
		int numOfDirections = intUp + intDown + intRight + intLeft; // 1-4

		int randomDirection = (int) (Math.random() * numOfDirections + 1); // random from 1 - 4 depending on
																			// numOfDirections
		// 1 is up
		// 2 is down
		// 3 is right
		// 4 is left

		if (up && randomDirection == 1)
			return 1;
		else if (down && randomDirection == 1)
			return 2;
		else if (right && randomDirection == 1)
			return 3;
		else if (left && randomDirection == 1)
			return 4;

		else if (down && randomDirection == 2)
			return 2;
		else if (right && randomDirection == 2)
			return 3;
		else if (left && randomDirection == 2)
			return 4;

		else if (right && randomDirection == 3)
			return 3;
		else if (left && randomDirection == 3)
			return 4;
		
		else
			return 4;
	}

	public static int randomViableSquare(int size) { // This picks a random viable square from 1 - 100
		up = false;
		down = false;
		left = false;
		right = false;
		while (true) {
			int pos = (int) (Math.random() * 100 + 1); // 1 - 100
			int row = row(pos);
			int column = column(pos);
			up = canPlaceUp(pos, size);
			down = canPlaceDown(pos, size);
			right = canPlaceRight(pos, size);
			left = canPlaceLeft(pos, size);

			if (up || down || right || left) { // we've found a viable pos
				return pos;
			}
		}
	}

	public static boolean canPlaceRight(int pos, int size) {
		int column = column(pos);
		boolean output = false;
		if (column + (size - 1) <= 10) {// checks if a boat can be placed to the right of "first"
			for (int i = 1; i < size; i++) {
				if (enemyBoard[pos + i] == '-') {
					output = true;
				} else {
					output = false;
					break;
				}
			}
		}
		return output;
	}

	public static boolean canPlaceLeft(int pos, int size) {
		int column = column(pos);
		boolean output = false;
		if (column - (size - 1) > 0) {// checks if a boat can be placed to the left of "first"
			for (int i = 1; i < size; i++) {
				if (enemyBoard[pos - i] == '-') {
					output = true;
				} else {
					output = false;
					break;
				}
			}
		}
		return output;
	}

	public static boolean canPlaceUp(int pos, int size) {
		int row = row(pos);
		boolean output = false;
		if (row - (size + 1) > 0) {// checks if a boat can be placed above "first"
			for (int i = 1; i < size; i++) {
				if (enemyBoard[pos - 10 * i] == '-') {
					output = true;
				} else {
					output = false;
					break;
				}
			}
		}
		return output;
	}

	public static boolean canPlaceDown(int pos, int size) {
		int row = row(pos);
		boolean output = false;
		if (row + (size - 1) <= 10) {// checks if a boat can be placed below "first"
			for (int i = 1; i < size; i++) {
				if (enemyBoard[pos + 10 * i] == '-') {
					output = true;
				} else {
					output = false;
					break;
				}
			}
		}
		return output;
	}

	public static boolean checker(int first, int size) { // random square, size of ship
		int space = size - 1; // amount of space we need to place ship
		up = false;
		down = false;
		left = false;
		right = false;
		int row = row(first);
		int column = column(first);

		if (up || down || right || left) {
			return true;
		} else {
			return false;
		}
	}

	public static int row(int position) {
		return position / 10 + 1;
	}

	public static int column(int position) {
		if (position % 10 == 0)
			return 10;
		return position % 10;
	}

	public static int charToInt(char input) {
		// this method takes an input from the board position and turns it into the
		// corresponding int from 1 to 100
		// Ex: A1 would return 1. D1 would return 4. D6 would return 54.
		return 0;
	}

	public static char intToChar(int input) {
		// input is an int from 1 to 100 and outputs the corresponding letter-number
		// code
		// reverse of the charToInt method
		return ' ';
	}

	public static char hitOrMiss(char index) {
		return hitOrMiss(charToInt(index));
	}

	public static char hitOrMiss(int index) {
		// 1. checks "boatPositions" set to see if there is a ship at the inputed index
		// 2. if there is a ship, update "hit" set. if no ship, update "miss" set
		// 3. update board array with 'X' or 'O'
		// 4. return 'X' or 'O'
		// 5. sysout "hit" or "miss"
		// 5a. call "sunk" method
		return '-';
	}

	public static void sunkShip() {
		// after ship has been hit, checks to see if it is sunk
	}

	public static boolean gameover(int misses, int difficulty) {
		// after miss, checks to see if gameover
		if (misses > difficulty)
			return true;
		return false;
	}

	public static void printBoard(Character[] board) {
		System.out.println("");
		System.out.println(
				"===============================================================================================");
		System.out.println("           A   B   C   D   E   F   G   H   I   J");
		for (int i = 0; i < 10; i++) {
			System.out.print("\n" + (i + 1) + "\t");
			for (int j = 0; j < 10; j++) {
				System.out.print("   " + board[j + 10 * i]);
			}
		}
	}
}
